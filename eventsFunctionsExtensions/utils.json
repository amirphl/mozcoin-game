{
  "author": "",
  "category": "",
  "description": "",
  "extensionNamespace": "",
  "fullName": "",
  "helpPath": "",
  "iconUrl": "",
  "name": "Utils",
  "previewIconUrl": "",
  "shortDescription": "",
  "version": "",
  "tags": [],
  "authorIds": [],
  "dependencies": [],
  "eventsFunctions": [
    {
      "description": "get current time in format hh:mm:ss",
      "fullName": "Get Current Time",
      "functionType": "StringExpression",
      "group": "",
      "name": "get_current_time",
      "private": false,
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const date = new Date();\n\neventsFunctionContext.returnValue = `${date.getUTCHours()}:${date.getUTCMinutes()}:${date.getUTCSeconds()}`;",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Get Evaluation Interval in format hh:mm:ss",
      "fullName": "Get Evaluation Interval",
      "functionType": "StringExpression",
      "group": "",
      "name": "get_eval_time",
      "private": false,
      "sentence": "Update Evaluation Interval",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const data = JSON.parse(eventsFunctionContext.getArgument(\"data\"));\nconst m = parseInt(data.m);\nconst n = parseInt(data.n);\nconst date = new Date();\nconst hour = date.getUTCHours();\nconst start_hour = hour;\nconst minute = date.getUTCMinutes();\nconst start_min = Math.floor(minute / m) * m;\nlet eval_hour = start_hour;\nlet eval_min = start_min + n;\n\nif (eval_min >= 60) {\n    eval_min -= 60;\n    eval_hour += 1;\n}\n\nconst txt = `${eval_hour}:${eval_min}:00`;\n\neventsFunctionContext.returnValue = txt;",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "data",
          "longDescription": "",
          "name": "data",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get Remaining Prediction Time",
      "fullName": "Get Remaining Prediction Time",
      "functionType": "Expression",
      "group": "",
      "name": "get_remaining_pred_time",
      "private": false,
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const data = JSON.parse(eventsFunctionContext.getArgument(\"data\"));\nconst m = parseInt(data.m);\nconst date = new Date();\nconst end_min = Math.floor(date.getUTCMinutes() / m) * m + m;\nconst rem = (end_min - date.getUTCMinutes()) * 60;\n\neventsFunctionContext.returnValue = rem;",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "data",
          "longDescription": "",
          "name": "data",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get Counter",
      "fullName": "Get Counter",
      "functionType": "Expression",
      "group": "",
      "name": "get_counter",
      "private": false,
      "sentence": "",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const data = JSON.parse(eventsFunctionContext.getArgument(\"data\"));\nconst m = parseInt(data.m);\nconst date = new Date();\nconst end_min = Math.floor(date.getUTCMinutes() / m) * m + m;\n\n// TODO handle corner case\neventsFunctionContext.returnValue = end_min - date.getUTCMinutes();",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "data",
          "longDescription": "",
          "name": "data",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Get Num Mozcoins",
      "fullName": "Get Num Mozcoins",
      "functionType": "Expression",
      "group": "",
      "name": "get_num_mozcoins",
      "private": false,
      "sentence": "a",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "eventsFunctionContext.returnValue = runtimeScene.getGame().getVariables().get(\"user\").getChild(\"num_mozcoins\").getAsNumber();",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Update Prediction Parameters",
      "fullName": "Update Prediction Parameters",
      "functionType": "Action",
      "group": "",
      "name": "update_pred_params",
      "private": false,
      "sentence": "Update Prediction Parameters",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const selected_coin_index = runtimeScene.getGame().getVariables().get(\"selected_coin_index\").getAsNumber();\nconst coins_info = runtimeScene.getGame().getVariables().get(\"coins_info\");\nconst coins_names = Object.keys(coins_info.getAllChildren());\nconst selected_coin_name = coins_names[selected_coin_index];\n\nconst xhr = new XMLHttpRequest();\n// sync\nxhr.open(\"GET\", `http://31.7.68.232/api/v1/coins/${selected_coin_name}`, false);\nxhr.onload = function (e) {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n            runtimeScene.getVariables().get(\"data\").setString(xhr.responseText);\n        } else {\n            // TODO\n            console.error(`failed to get \"${selected_coin_name}\" prediction info`, xhr.statusText);\n        }\n    }\n};\nxhr.onerror = function (e) {\n    // TODO\n    console.error(`failed to get \"${selected_coin_name}\" prediction info`, xhr.statusText);\n};\nxhr.send(null);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Submit Prediction",
      "fullName": "Submit Prediction",
      "functionType": "Action",
      "group": "",
      "name": "submit_pred",
      "private": false,
      "sentence": "Submit Prediction",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "create branches based on a json describing the branches and their intervals",
      "fullName": "Create Branches",
      "functionType": "Action",
      "group": "",
      "name": "create_branches",
      "private": false,
      "sentence": "create branches based on _PARAM1_",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const data = JSON.parse(eventsFunctionContext.getArgument(\"data\"));\nconst branches = data.branches;\nconst num = Object.keys(branches).length;\n\nconst resolution_width = runtimeScene.getGame().getGameResolutionWidth();\nconst resolution_height = runtimeScene.getGame().getGameResolutionHeight();\nconst branch_width = resolution_width / 10;\nconst branch_height = Math.min(resolution_height / num, resolution_height / 10);\nconst x_offset = 50;\nconst y_offset = 150;\nconst y_gap = (resolution_height - y_offset) / num;\nconst branch_logo_name = \"branch_logo\";\nconst branch_num_mozcoins_txt_name = \"branch_num_mozcoins_txt\";\nconst branch_num_mozcoins_capture_name = \"branch_num_mozcoins_capture\";\n\nlet counter = 0;\nObject.entries(branches).forEach((b) => {\n    const [_, value] = b;\n    \n    // create new branch\n    const new_branch = runtimeScene.createObject(branch_logo_name);\n    new_branch.setHeight(branch_height);\n    new_branch.setWidth(branch_width);\n    new_branch.setX(resolution_width - branch_width - x_offset);\n    new_branch.setY(y_offset + counter * y_gap);\n    new_branch.setZOrder(2);\n\n    // create input capture\n    const capture = runtimeScene.createObject(branch_num_mozcoins_capture_name);\n    capture.activate(false);\n    capture.setHeight(0);\n    capture.setWidth(0);\n    capture.setX(0);\n    capture.setY(0);\n    capture.setZOrder(2);\n\n    // create input txt\n    const txt = runtimeScene.createObject(branch_num_mozcoins_txt_name);\n    txt.setHeight(10);\n    txt.setWidth(20);\n    txt.setX(resolution_width - branch_width / 2 - x_offset);\n    txt.setY(y_offset + counter * y_gap);\n    txt.setZOrder(2);\n\n    counter++;\n});",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [
        {
          "codeOnly": false,
          "defaultValue": "",
          "description": "data",
          "longDescription": "",
          "name": "data",
          "optional": false,
          "supplementaryInformation": "",
          "type": "string"
        }
      ],
      "objectGroups": []
    },
    {
      "description": "Update Branch Inputs",
      "fullName": "Update Branch Inputs",
      "functionType": "Action",
      "group": "",
      "name": "update_branch_inputs",
      "private": false,
      "sentence": "Update Branch Inputs",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const num_mozcoins = runtimeScene.getGame().getVariables().get(\"user\").getChild(\"num_mozcoins\").getAsNumber();\nconst branch_num_mozcoins_capture_name = \"branch_num_mozcoins_capture\";\nconst branch_num_mozcoins_txt_name = \"branch_num_mozcoins_txt\";\nconst branch_logo_name = \"branch_logo\";\nconst branch_logos = runtimeScene.getObjects(branch_logo_name);\nconst branch_txts = runtimeScene.getObjects(branch_num_mozcoins_txt_name);\nconst branch_captures = runtimeScene.getObjects(branch_num_mozcoins_capture_name);\nconst numbers = /([0-9]+)/;\n// TODO\nconst branch_num_animation = 3;\n\nlet c = 0;\nlet input;\nlet consumed_moz = 0;\nlet current_txt = null;\nlet current_capture = null;\nlet current_branch = null;\n\nfor(let txt of branch_txts) {\n    if (branch_captures[c].isActivated()) {\n        current_txt = txt;\n        current_capture = branch_captures[c];\n        current_branch = branch_logos[c];\n    } else {\n        input = branch_captures[c].getString().replace(/\\D/g, '');\n        input = input.substring(0, Math.min(input.length, 3));\n\n        if (input === \"\") {\n            input = \"0\";\n        }\n\n        consumed_moz += parseInt(input);\n        branch_captures[c].setString(input);\n        txt.setString(input);\n\n        branch_logos[c].setAnimation(Math.floor(parseInt(input) / (num_mozcoins / branch_num_animation)));\n    }\n    c++;\n}\n\nif (current_txt === null) {\n    return;\n}\n\ninput = current_capture.getString().replace(/\\D/g, '');\ninput = input.substring(0, Math.min(input.length, 3));\n\nif (input === \"\") {\n    input = \"0\";\n}\n\ninput = Math.min(num_mozcoins - consumed_moz, parseInt(input));\ncurrent_txt.setString(input.toString());\ncurrent_capture.setString(input.toString());\ncurrent_branch.setAnimation(Math.floor(input / (Math.ceil(num_mozcoins / branch_num_animation))));",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Activate Branch Capture",
      "fullName": "Activate Branch Capture",
      "functionType": "Action",
      "group": "",
      "name": "activate_branch_capture",
      "private": false,
      "sentence": "Activate Branch Capture",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const branch_logo_name = \"branch_logo\";\nconst branch_logos = runtimeScene.getObjects(branch_logo_name);\nconst branch_num_mozcoins_capture_name = \"branch_num_mozcoins_capture\";\nconst branch_captures = runtimeScene.getObjects(branch_num_mozcoins_capture_name);\n\nlet c = 0;\nfor(let branch of branch_logos) {\n    if (branch.cursorOnObject(runtimeScene)) {\n        branch_captures[c].activate(true);\n    } else {\n        branch_captures[c].activate(false);\n    }\n    c++;\n}",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Deactivate Branch Captures",
      "fullName": "Deactivate Branch Captures",
      "functionType": "Action",
      "group": "",
      "name": "deactivate_branch_captures",
      "private": false,
      "sentence": "Deactivate Branch Captures",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const branch_num_mozcoins_capture_name = \"branch_num_mozcoins_capture\";\nconst branch_captures = runtimeScene.getObjects(branch_num_mozcoins_capture_name);\n\nfor (let capture of branch_captures) {\n    capture.activate(false);\n}",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Branch Is Selected",
      "fullName": "Branch Is Selected",
      "functionType": "Condition",
      "group": "",
      "name": "branch_is_selected",
      "private": false,
      "sentence": "Branch Is Selected",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const branch_logo_name = \"branch_logo\";\nconst branch_logos = runtimeScene.getObjects(branch_logo_name);\nlet res = false;\n\nfor(let branch of branch_logos) {\n    if (branch.cursorOnObject(runtimeScene)) {\n        res = true;\n        break;\n    }\n}\n\neventsFunctionContext.returnValue = res;",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Login User",
      "fullName": "Login User",
      "functionType": "Action",
      "group": "",
      "name": "login_user",
      "private": false,
      "sentence": "Login User",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const user = runtimeScene.getGame().getVariables().get(\"user\").toJSObject();\nconst xhr = new XMLHttpRequest();\n\n// sync\n// TODO POST\nxhr.open(\"GET\", `http://31.7.68.232/api/v1/users/${user.uuid}`, false);\nxhr.setRequestHeader(\"Authorization\", user.token);\nxhr.onload = function (e) {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n            runtimeScene.getGame().getVariables().get(\"user\").fromJSON(xhr.responseText);\n        } else {\n            // TODO\n            console.error(\"login failed. status: \", xhr.statusText);\n        }\n        runtimeScene.getVariables().get(\"login_status\").setString(xhr.statusText);\n    }\n};\nxhr.onerror = function (e) {\n    // TODO\n    console.error(\"login failed. status: \", xhr.statusText);\n    runtimeScene.getVariables().get(\"login_status\").setString(xhr.statusText);\n};\nxhr.send(null);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Register User",
      "fullName": "Register User",
      "functionType": "Action",
      "group": "",
      "name": "register_user",
      "private": false,
      "sentence": "Register User",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const xhr = new XMLHttpRequest();\n\n// sync\n// TODO POST\nxhr.open(\"GET\", `http://31.7.68.232/api/v1/users/`, false);\nxhr.onload = function (e) {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 201) {\n            runtimeScene.getGame().getVariables().get(\"user\").fromJSON(xhr.responseText);\n        } else {\n            // TODO\n            console.error(\"registeration failed. status: \", xhr.statusText);\n        }\n        runtimeScene.getVariables().get(\"registeration_status\").setString(xhr.statusText);\n    }\n};\nxhr.onerror = function (e) {\n    // TODO\n    console.error(\"registeration failed. status: \", xhr.statusText);\n    runtimeScene.getVariables().get(\"registeration_status\").setString(xhr.statusText);\n};\nxhr.send(null);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Update Coins List",
      "fullName": "Update Coins List",
      "functionType": "Action",
      "group": "",
      "name": "update_coins_list",
      "private": false,
      "sentence": "Update Coins List",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const selected_coin_index = 0;\nruntimeScene.getGame().getVariables().get(\"selected_coin_index\").setNumber(selected_coin_index);\n\nconst xhr = new XMLHttpRequest();\n// sync\nxhr.open(\"GET\", \"http://31.7.68.232/api/v1/coins/\", false);\nxhr.onload = function (e) {\n    if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n            runtimeScene.getGame().getVariables().get(\"coins_info\").fromJSON(xhr.responseText);\n        } else {\n            // TODO\n            console.error(\"failed to get coins list. status: \", xhr.statusText);\n        }\n    }\n};\nxhr.onerror = function (e) {\n    // TODO\n    console.error(\"failed to get coins list. status: \", xhr.statusText);\n};\nxhr.send(null);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    },
    {
      "description": "Select Next Coin",
      "fullName": "Select Next Coin",
      "functionType": "Action",
      "group": "",
      "name": "select_next_coin",
      "private": false,
      "sentence": "Select Next Coin",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::JsCode",
          "inlineCode": "const right_arrow_logo_name = \"right_arrow_logo\";\nconst current_coin_logo_name = \"current_coin_logo\";\nconst is_right_arrow_hovered = runtimeScene.getObjects(right_arrow_logo_name)[0].cursorOnObject(runtimeScene);\nconst selected_coin_index = runtimeScene.getGame().getVariables().get(\"selected_coin_index\").getAsNumber();\nconst coins_info = runtimeScene.getGame().getVariables().get(\"coins_info\").toJSObject();\nconst coins_names = Object.keys(coins_info);\nlet next_coin_index;\n\nif (is_right_arrow_hovered) {\n    next_coin_index = (selected_coin_index == 0) ? coins_names.length : selected_coin_index;\n    next_coin_index--;\n} else { // so `is_left_arrow_hovered` is hovered\n    next_coin_index = (selected_coin_index == coins_names.length - 1) ? -1 : selected_coin_index;\n    next_coin_index++;\n}\n\nruntimeScene.getGame().getVariables().get(\"selected_coin_index\").setNumber(next_coin_index);\nconst current_coin_logo = runtimeScene.getObjects(current_coin_logo_name)[0];\ncurrent_coin_logo.setAnimationName(coins_names[next_coin_index]);",
          "parameterObjects": "",
          "useStrict": true,
          "eventsSheetExpanded": false
        }
      ],
      "parameters": [],
      "objectGroups": []
    }
  ],
  "eventsBasedBehaviors": []
}